	

#Q2)
#Write a MIPS program that
#Gets a input string and checks if it is a palindrome. (Study load byte, store byte and some other instructions if need).
 	.text
 	.globl __start
 __start:
 	la $a0,text_P
 	li $v0,4
 	syscall
 	
 	li $v0,8
 	la $a0,space #string saved
 	li $a1, 20, #string can be up to 20 char
 	move $t0,$a0 # to holds the sting's content 
 	syscall
 	
 	move $t6,$t0
 	li $t2,0 #t2 str.lenght
 
lenghtStr: #(.lenght function in C++)
	
	lb $t1,($t6)
	beq $t1,$0,terminate 
	
	add $t6,$t6,1 #iterating over string
	add $t2,$t2,1 # coutint the number of chars in the string
	
	j lenghtStr
	
terminate:
	sub  $t2,$t2,1 #since the lenght is going to be size+1, must be sub w/1
	
	div $t1,$t2,2 #t1=t2/2
	sub $t2,$t2,1 #t2-1 must be last element
	add $t2,$2,$t0 #t2 point to the last element
palindrome_loop:
	lb $t3,($t0)
	lb $t4,($t2)
	
	bne $t3,$t4,not_palindrome
	 
	addi $t0,$t0,1 # firstptr++
	subi $t2,$t2,1 # lastptr
	subi $t1,$t1,1 # counting
	  
	beq $t1,0,palindrome
	j palindrome_loop
	 
not_palindrome:
	la $a0,res_neg
	li $v0,4
	syscall
	li $v0,10
	syscall
palindrome:
	la $a0, res_afr
	li $v0,4
	syscall
	
	 .data
res_afr:  .asciiz " It is palindrome"
res_neg:  .asciiz " It is not palindrome"
text_P:   .asciiz "enter the text"
space: 	  .space 20 #since a char is holding 1 byte